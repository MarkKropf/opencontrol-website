{
    "docs": [
        {
            "location": "/", 
            "text": "A YAML-Powered Antidote To Bureaucracy\n\n\nIt's a powerfully simply idea.\n\n\nTo improve the quality of our software development, we use continuous integration.\nTo improve the reliability of our deployment, we use continuous delivery.\nTo improve the security of our systems, we can use continuous authorization.\n\n\nSimply put, the tools that we use to develop and operate software, should also be\nused to generate and validate assessment and authorization packages.\n\n\nEvery commit runs the tests.\nEvery passing build, updates the system security plan.\nEvery deployment includes updates to continuous monitoring.\n\n\n\n\nSoftware as Code.\n\n\nTests as Code.\n\n\nInfrastructure as Code.\n\n\nCompliance as Code.\n\n\n\n\nIt's a schema.\n\n\nBy adopting a standard approach to documenting \"controls\" (whether Technical, Operational, or Management) we can rapidly build a community of vendors and operators. You can see \nthe current (and evolving) OpenControl schema here.\n\n\nIt's a set of tools and best practices.\n\n\nRight now we're excited about:\n\n\n\n\nConcourse.ci\n (see an example at \nhttps://dragon.somegood.org\n)\n\n\nGitBook (see how the 18F have used this to produce the \nSystem Security Plan for Cloud.Gov\n)\n\n\n\n\nThere are more details about how to use this set of tools to \nbuild a continuous authorization pipeline\n.\n\n\nIt's a community.\n\n\nThis community includes vendors that provide documentation of controls in a standard\nschema, government agencies and other regulators that document certifications in\nanother schema, and operators who use the OpenControl process to authorize their\nsystems.\n\n\nYou can see the \nfull list of current members here.", 
            "title": "Intro"
        }, 
        {
            "location": "/#a-yaml-powered-antidote-to-bureaucracy", 
            "text": "", 
            "title": "A YAML-Powered Antidote To Bureaucracy"
        }, 
        {
            "location": "/#its-a-powerfully-simply-idea", 
            "text": "To improve the quality of our software development, we use continuous integration.\nTo improve the reliability of our deployment, we use continuous delivery.\nTo improve the security of our systems, we can use continuous authorization.  Simply put, the tools that we use to develop and operate software, should also be\nused to generate and validate assessment and authorization packages.  Every commit runs the tests.\nEvery passing build, updates the system security plan.\nEvery deployment includes updates to continuous monitoring.   Software as Code.  Tests as Code.  Infrastructure as Code.  Compliance as Code.", 
            "title": "It's a powerfully simply idea."
        }, 
        {
            "location": "/#its-a-schema", 
            "text": "By adopting a standard approach to documenting \"controls\" (whether Technical, Operational, or Management) we can rapidly build a community of vendors and operators. You can see  the current (and evolving) OpenControl schema here.", 
            "title": "It's a schema."
        }, 
        {
            "location": "/#its-a-set-of-tools-and-best-practices", 
            "text": "Right now we're excited about:   Concourse.ci  (see an example at  https://dragon.somegood.org )  GitBook (see how the 18F have used this to produce the  System Security Plan for Cloud.Gov )   There are more details about how to use this set of tools to  build a continuous authorization pipeline .", 
            "title": "It's a set of tools and best practices."
        }, 
        {
            "location": "/#its-a-community", 
            "text": "This community includes vendors that provide documentation of controls in a standard\nschema, government agencies and other regulators that document certifications in\nanother schema, and operators who use the OpenControl process to authorize their\nsystems.  You can see the  full list of current members here.", 
            "title": "It's a community."
        }, 
        {
            "location": "/faq/", 
            "text": "OpenControl: Questions\n\n\nWhat?\n\n\nWhat license is this under?\n\n\n\n\nThe code portions are all licensed under Apache 2.0, except what has been contributed\ndirectly by the US Government, which is in the public domain. All written content\nhas been licensed as Creative Commons Zero.\n\n\n\n\nWhat regulations can I use this for?\n\n\n\n\nThe principles behind OpenControl can be applied to any regulatory environment,\nor in fact any operational environment with running systems and software. Currently,\nthe community repositories include FedRAMP low and moderate definitions using the\nNIST 800-53 certification, as well as a newly defined \"LATO\" authorization.\n\n\n\n\nWhat about PCI?\n\n\nWhat about SOX?\n\n\nWhat about HIPAA?\n\n\nWhat about ICD-503?\n\n\nWhat about FedRAMP?\n\n\nWhy?\n\n\nWhy would I want this?\n\n\nHow?\n\n\nWhy didn't you use XSLT?\n\n\nWhy didn't you use OpenSCAP?\n\n\nWhy did you use Concourse?\n\n\n\n\nThere are a lot of great continuous integration tools out there, including Jenkins,\nTravis, Bamboo, Wercker, and more. OpenControl pipelines can be defined using\nany CI tool. We felt that the \"dependency-injection\" style of job and resource\ndeclaration in Concourse made it a good fit for the semantics of OpenControl.\n\n\n\n\nHow do I get started using this??\n\n\n\n\nWe need to write a \"getting started\" tutorial. As a quick bootstrap, use the\ntutorial on the Concourse.ci website, and then checkout the example pipeline.\n\n\n\n\nWho?\n\n\nWho came up with this mess?\n\n\n\n\nThe ideas of continuous authorization have been around for a long time. The term\n'OpenControl' was coined by Joshua McKenty, and first used in \na keynote presentation\nat All Things Open 2015\n in Raleigh, North Carolina.\nThe presentation includes some history, and explicit thanks to key originators at\nboth 18F and Pivotal, as well as the creators of Cloud Audit. Special thanks goes\nto Diego Lapiduz and Noah Kunin.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#opencontrol-questions", 
            "text": "", 
            "title": "OpenControl: Questions"
        }, 
        {
            "location": "/faq/#what", 
            "text": "What license is this under?   The code portions are all licensed under Apache 2.0, except what has been contributed\ndirectly by the US Government, which is in the public domain. All written content\nhas been licensed as Creative Commons Zero.   What regulations can I use this for?   The principles behind OpenControl can be applied to any regulatory environment,\nor in fact any operational environment with running systems and software. Currently,\nthe community repositories include FedRAMP low and moderate definitions using the\nNIST 800-53 certification, as well as a newly defined \"LATO\" authorization.   What about PCI?  What about SOX?  What about HIPAA?  What about ICD-503?  What about FedRAMP?", 
            "title": "What?"
        }, 
        {
            "location": "/faq/#why", 
            "text": "Why would I want this?", 
            "title": "Why?"
        }, 
        {
            "location": "/faq/#how", 
            "text": "Why didn't you use XSLT?  Why didn't you use OpenSCAP?  Why did you use Concourse?   There are a lot of great continuous integration tools out there, including Jenkins,\nTravis, Bamboo, Wercker, and more. OpenControl pipelines can be defined using\nany CI tool. We felt that the \"dependency-injection\" style of job and resource\ndeclaration in Concourse made it a good fit for the semantics of OpenControl.   How do I get started using this??   We need to write a \"getting started\" tutorial. As a quick bootstrap, use the\ntutorial on the Concourse.ci website, and then checkout the example pipeline.", 
            "title": "How?"
        }, 
        {
            "location": "/faq/#who", 
            "text": "Who came up with this mess?   The ideas of continuous authorization have been around for a long time. The term\n'OpenControl' was coined by Joshua McKenty, and first used in  a keynote presentation\nat All Things Open 2015  in Raleigh, North Carolina.\nThe presentation includes some history, and explicit thanks to key originators at\nboth 18F and Pivotal, as well as the creators of Cloud Audit. Special thanks goes\nto Diego Lapiduz and Noah Kunin.", 
            "title": "Who?"
        }, 
        {
            "location": "/schema/", 
            "text": "OpenControl: Schema\n\n\nThe OpenControl pipeline combines four types of yaml files:\nstandards, certifications, components, and systems.\n\n\nStandards Schema\n\n\nStandards (such as NIST 800-53) provide a list of controls that can be\nreferenced in a certification, and include descriptions that may or may not\nbe included in the final documentation.\n\n\n# nist-800-53.yaml\n---\nstandards:\n  C-2:\n    name: User Access\n    description: There is an affordance for managing access by...\n\n\n\n\nYou can find the \ncomplete file on github.\n\n\nCertification Schema\n\n\nCertifications (such as FedRAMP Low) provide the scaffolding for a system's\nauthorization. They include a list of required controls.\n\n\nHere is a fragment of the FedRAMP certification YAML, showing the schema.\n\n\n# FedRAMP-low.yaml\n---\nstandards:\n  nist-800-53:\n    C-2: ~\n    C-3: ~\n\n\n\n\nYou can find the \ncomplete file on github.\n\n\nComponent Schema\n\n\nHere is an example component schema:\n\n\n# CloudFoundry-UAA.yaml\n---\nname: User Account and Authentication (UAA) Server\nreferences:\n- name: User Account and Authentication (UAA) Server\n  url: http://docs.pivotal.io/pivotalcf/concepts/architecture/uaa.html\ngovernors:\n- name: Cloud Foundry Roles\n  url: https://cf-p1-docs-prod.cfapps.io/pivotalcf/concepts/roles.html\nsatisfies:\n  NIST-800-53:\n    AC-2: Cloud Foundry accounts are managed through the User Account and Authentication (UAA) Server.\n\n\n\n\nYou can find the \ncomplete file on github.\n\n\nSystem Schema\n\n\nThe System YAML file is the only OpenControl schema that is explicitly defined as\na spruce template. It combines the Standards, Certifications, and Components to\nproduce a complete System Security Plan.\n\n\nThis example is for an installation of Pivotal Cloud Foundry running on top of\nAmazon Web Services, and includes a number of controls satisfied thru additional\nsoftware components (aka compensating controls).\n\n\n# pcf-on-aws-fedramp.yaml\n---\n\n\n\n\n\n\nYou can find the \ncomplete file on github.", 
            "title": "Schema"
        }, 
        {
            "location": "/schema/#opencontrol-schema", 
            "text": "The OpenControl pipeline combines four types of yaml files:\nstandards, certifications, components, and systems.", 
            "title": "OpenControl: Schema"
        }, 
        {
            "location": "/schema/#standards-schema", 
            "text": "Standards (such as NIST 800-53) provide a list of controls that can be\nreferenced in a certification, and include descriptions that may or may not\nbe included in the final documentation.  # nist-800-53.yaml\n---\nstandards:\n  C-2:\n    name: User Access\n    description: There is an affordance for managing access by...  You can find the  complete file on github.", 
            "title": "Standards Schema"
        }, 
        {
            "location": "/schema/#certification-schema", 
            "text": "Certifications (such as FedRAMP Low) provide the scaffolding for a system's\nauthorization. They include a list of required controls.  Here is a fragment of the FedRAMP certification YAML, showing the schema.  # FedRAMP-low.yaml\n---\nstandards:\n  nist-800-53:\n    C-2: ~\n    C-3: ~  You can find the  complete file on github.", 
            "title": "Certification Schema"
        }, 
        {
            "location": "/schema/#component-schema", 
            "text": "Here is an example component schema:  # CloudFoundry-UAA.yaml\n---\nname: User Account and Authentication (UAA) Server\nreferences:\n- name: User Account and Authentication (UAA) Server\n  url: http://docs.pivotal.io/pivotalcf/concepts/architecture/uaa.html\ngovernors:\n- name: Cloud Foundry Roles\n  url: https://cf-p1-docs-prod.cfapps.io/pivotalcf/concepts/roles.html\nsatisfies:\n  NIST-800-53:\n    AC-2: Cloud Foundry accounts are managed through the User Account and Authentication (UAA) Server.  You can find the  complete file on github.", 
            "title": "Component Schema"
        }, 
        {
            "location": "/schema/#system-schema", 
            "text": "The System YAML file is the only OpenControl schema that is explicitly defined as\na spruce template. It combines the Standards, Certifications, and Components to\nproduce a complete System Security Plan.  This example is for an installation of Pivotal Cloud Foundry running on top of\nAmazon Web Services, and includes a number of controls satisfied thru additional\nsoftware components (aka compensating controls).  # pcf-on-aws-fedramp.yaml\n---  You can find the  complete file on github.", 
            "title": "System Schema"
        }, 
        {
            "location": "/pipelines/", 
            "text": "OpenControl Pipelines\n\n\nContinuous Authorization pipelines can be constructed using the\nopen source \nConcourse.ci\n tool.\nThere is a running example of this at \nhttps://dragon.somegood.org\n.\n\n\n\nThe \nexample pipeline is available on github.\n\n\nThe notional architecture of the OpenControl pipeline is below.\n\n\n\nKey Tools\n\n\nOpenControl systems, components and authorizations are defined using YAML. So\nmuch of the pipeline is simply merging of various YAML files. This is performed\nusing a tool called \n\"Spruce\"\n.\n\n\nSpruce merges yaml files from left to right, so the template for the system\nauthorization will always be listed first. Files of each of the required schemas\nwill come next, and finally an \"override\" file for system-specific controls\nwill be merged last. (This file would also include any plan-specific metadata such\n  as Authorizing Official, SSP Author, etc.)\n\n\nOnce a complete system-security-plan (SSP) YAML has been generated, it can be\ntransformed into a variety of formats. For human-readable documentation, the YAML\nshould be converted to Markdown, and then passed into GitBook. GitBook can output\nHTML, PDF, or various ePUB formats.\n\n\nProducing configuration for your continuous monitoring tools can be generated directly\nfrom the SSP YAML, using various python libraries.\n\n\nOf course, most existing certifications are not yet documented in YAML, but in XML.\nSo we use \nComplianceLib from GovReady\n\nto transform these XML files into YAML.", 
            "title": "Pipeline"
        }, 
        {
            "location": "/pipelines/#opencontrol-pipelines", 
            "text": "Continuous Authorization pipelines can be constructed using the\nopen source  Concourse.ci  tool.\nThere is a running example of this at  https://dragon.somegood.org .  The  example pipeline is available on github.  The notional architecture of the OpenControl pipeline is below.", 
            "title": "OpenControl Pipelines"
        }, 
        {
            "location": "/pipelines/#key-tools", 
            "text": "OpenControl systems, components and authorizations are defined using YAML. So\nmuch of the pipeline is simply merging of various YAML files. This is performed\nusing a tool called  \"Spruce\" .  Spruce merges yaml files from left to right, so the template for the system\nauthorization will always be listed first. Files of each of the required schemas\nwill come next, and finally an \"override\" file for system-specific controls\nwill be merged last. (This file would also include any plan-specific metadata such\n  as Authorizing Official, SSP Author, etc.)  Once a complete system-security-plan (SSP) YAML has been generated, it can be\ntransformed into a variety of formats. For human-readable documentation, the YAML\nshould be converted to Markdown, and then passed into GitBook. GitBook can output\nHTML, PDF, or various ePUB formats.  Producing configuration for your continuous monitoring tools can be generated directly\nfrom the SSP YAML, using various python libraries.  Of course, most existing certifications are not yet documented in YAML, but in XML.\nSo we use  ComplianceLib from GovReady \nto transform these XML files into YAML.", 
            "title": "Key Tools"
        }, 
        {
            "location": "/members/", 
            "text": "OpenControl Members\n\n\nThe Vendors and Operators below have, unofficially and without any legally-binding commitment,\nendorsed the principles of Continuous Authorization, and have agreed to\ncollaborate on the development of the OpenControl schema, tools and best practices.\n\n\nVendor Members\n\n\n\n\nPivotal, Inc.\n\n\nProduct: \nPivotal Cloud Foundry\n\n\nOpenControl Repo: \nhttps://github.com/cloudfoundry-community/compliance\n\n\nAmazon Web Services (via 18F)\n\n\nProduct: \nAmazon Web Services\n\n\nOpenControl Repo: \nhttps://github.com/18F/control-masonry/tree/master/data/components/AWS\n\n\nOperator Members\n\n\n\n\nPivotal, Inc.\n\n\nProduct: \nPivotal Web Services\n\n\nhttps://run.pivotal.io/\n\n\nUS Government GSA, 18F\n\n\nProduct: \nCloud.gov\n\n\nhttps://cloud.gov/\n\n\nRegulatory Members\n\n\n\n\nUS Government NIST (via 18F)\n\n\nProduct: \nNIST 800-53\n\n\n\n\nWant to join? Simply \nsubmit a pull request\n to this document and add yourself.", 
            "title": "Members"
        }, 
        {
            "location": "/members/#opencontrol-members", 
            "text": "The Vendors and Operators below have, unofficially and without any legally-binding commitment,\nendorsed the principles of Continuous Authorization, and have agreed to\ncollaborate on the development of the OpenControl schema, tools and best practices.", 
            "title": "OpenControl Members"
        }, 
        {
            "location": "/members/#vendor-members", 
            "text": "Pivotal, Inc.  Product:  Pivotal Cloud Foundry  OpenControl Repo:  https://github.com/cloudfoundry-community/compliance  Amazon Web Services (via 18F)  Product:  Amazon Web Services  OpenControl Repo:  https://github.com/18F/control-masonry/tree/master/data/components/AWS", 
            "title": "Vendor Members"
        }, 
        {
            "location": "/members/#operator-members", 
            "text": "Pivotal, Inc.  Product:  Pivotal Web Services  https://run.pivotal.io/  US Government GSA, 18F  Product:  Cloud.gov  https://cloud.gov/", 
            "title": "Operator Members"
        }, 
        {
            "location": "/members/#regulatory-members", 
            "text": "US Government NIST (via 18F)  Product:  NIST 800-53   Want to join? Simply  submit a pull request  to this document and add yourself.", 
            "title": "Regulatory Members"
        }
    ]
}